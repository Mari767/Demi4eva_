//ЛАБОРАТОРНАЯ РАБОТА № 5
//Используя директивы процессора реализовать выбор одной из реализованных функций(функция принимает и возвращает массив) :
//	– работа с одномерным массивом, как с двумерным(*А);
//  – работа с двумерным массивом, как с двумерным(**А).
#include "Declaration.h"
#include <windows.h>
//#define Print_1

int main() {
	setlocale(LC_ALL, "ru");
	int* Pmas;    /* указатель на начало массива */
	int Size;    /* размерность матрицы         */
	int* I;     /* текущий указатель у массиве */
	int i, j;  /* счетчики элементов*/

	cout << "Ввыедите размерность квадратной матрицы. Размерность не должена привышать числа 24. " << endl;
	cin >> Size;
	if (Size < 1) {
		cout << "Размер матрицы слишком мал" << endl;
		return 0;
	}
	if (Size > 24) {
		cout << "Размерность матрицы слишком велика." << endl;
		return 0;
	}
	//Заполнение матрицы
#ifdef Print_1   //  работа с одномерным массивом, как с двумерным(*А);
	int* Mas = (int*)malloc(Size * Size * sizeof(int));
	Input_1(Mas, Size);  
	//Вывод матрицы
	for (i = 0, I = Mas; i < Size * Size; i++, I++) {
		printf("%3d", *I);
		if (i % Size == Size - 1) {
			putchar('\n');
		}
	}
	free(Mas);
#else             //  работа с двумерным массивом, как с двумерным(**А).
	int** Arr = new int* [Size];
	/* выделение памяти для каждой строки и заполнение массива указателей */
	for (i = 0; i < Size; i++) {
		Arr[i] = new int[Size];
	}
	Input_2(Arr, Size);  
	/* вывод матрицы */
	for (i = 0; i < Size; i++) {
		for (j = 0; j < Size; j++) {
			printf("%3d", *(*(Arr + i) + j));
		}putchar('\n');
	}
	/* освобождение памяти строк */
	for (i = 0; i < Size; i++) {
		delete[] Arr[i];
	}
	/* освобождение памяти массива указателей */
	delete[] Arr;
#endif
	return 0;
}